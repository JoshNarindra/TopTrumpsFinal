@model List<TopTrumpsFinal.Models.DogDeck>
@{
    DogDeck currentCard = null;
    DogDeck nextCard = null;
    if (Model != null)
    {
        currentCard = Model[0];
        nextCard = Model[1];
    }
    else
    {
        <p>No cards to display</p>
    }
    void CompareCards(DogDeck currentCard, DogDeck nextCard)
    {
        Console.WriteLine(currentCard.Size);
        Console.WriteLine(nextCard.Size);
    }
}
<style>
    

    body{
        background-color: #005C53;
    }
    #first-card {
        background-color:#D6D58E;
        padding: 40px;
        text-align: left;
        width: 350px;
        height:50%;
        margin-left:15%;
    }

    #light {
        background-color: #DBF227;
        width:80%;
        margin:auto;
        border-radius: 5px;
        font-family: Haettenschweiler;
        font-size:25px;
        padding-top:0;
        
    }

    #dark {
        background-color: #9FC131;
        width: 80%;
        margin:auto;
        font-family: Haettenschweiler;
        font-size:25px;
        border-radius: 5px;
        
    }

    img {
        margin-left:25%;
        }

    #glow-on-hover {
        width: 220px;
        height: 50px;
        border: none;
        outline: none;
        color: #fff;
        background: #111;
        cursor: pointer;
        position: relative;
        z-index: 0;
        border-radius: 10px;
        margin-left: 10%;
    }
    #glow-on-hover:before {
    content: '';
    background: linear-gradient(45deg, #ff0000, #ff7300, #fffb00, #48ff00, #00ffd5, #002bff, #7a00ff, #ff00c8, #ff0000);
    position: absolute;
    top: -2px;
    left:-2px;
    background-size: 400%;
    z-index: -1;
    filter: blur(5px);
    width: calc(100% + 4px);
    height: calc(100% + 4px);
    animation: glowing 20s linear infinite;
    opacity: 0;
    transition: opacity .3s ease-in-out;
    border-radius: 10px;
    }

    #glow-on-hover:active {
    color: #000
    }

    #glow-on-hover:active:after {
    background: transparent;
    }

    #glow-on-hover:hover:before {
    opacity: 1;
    }

    #glow-on-hover:after {
    z-index: -1;
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: #111;
    left: 0;
    top: 0;
    border-radius: 10px;
    }

    button{
        left:40%;
    }
  

</style>
<div>
    <h2>Card @(Model.IndexOf(currentCard) + 1) of @Model.Count</h2>
    <div id="first-card">
        <img src="https://via.placeholder.com/150" alt="@currentCard.Name" style="width:150px;height:200px;">
        <br />
        <div id="dark">
            <label>
                <input type="checkbox" name="category" value="Size" /> Size :&emsp;&emsp;&emsp; @currentCard.Size
            </label>
        </div>
        <br />
        <div id="light">
        <label>
                <input type="checkbox" name="category" value="Rarity" /> Rarity :&emsp;&emsp;&nbsp;&nbsp; @currentCard.Rarity
            </label>
        </div>
        <br />
        <div id="dark">
        <label>
                <input type="checkbox" name="category" value="GoodTemper" /> Good Temper :&nbsp;&nbsp; @currentCard.GoodTemper
            </label>
        </div>
        <br />
        <div id="light">
            
        <label>
                <input type="checkbox" name="category" value="Cuteness" /> Cuteness :&emsp;&ensp; @currentCard.Cuteness
            </label>
        </div>
        <br />
        <div id="dark">
        <label>
                <input type="checkbox" name="category" value="Rating" /> Rating :&emsp;&emsp;&nbsp;&nbsp; @currentCard.Rating
            </label>
        </div>
        <br />
        
    </div>
    <div id="second-card" style="display: none;">
        <img src="@nextCard.ImageLink" alt="@nextCard.Name" style="width:150px;height:200px;">
        <br />
        <label>
            Size: @nextCard.Size
        </label>
        <br />
        <label>
            Rarity: @nextCard.Rarity
        </label>
        <br />
        <label>
            Good Temper: @nextCard.GoodTemper
        </label>
        <br />
        <label>
            Cuteness: @nextCard.Cuteness
        </label>
        <br />
        <label>
            Rating: @nextCard.Rating
        </label>
    </div>
    @*<button type="button"  onclick="@CompareCards()"></button>*@
    <button type="button" id="glow-on-hover" onclick="compareCards('@currentCard.Size', '@currentCard.Rarity', '@currentCard.GoodTemper',
'@currentCard.Cuteness', '@currentCard.Rating','@nextCard.Size', '@nextCard.Rarity', '@nextCard.GoodTemper',
'@nextCard.Cuteness', '@nextCard.Rating')">
        Compare
    </button>
    <script>
        var currentCard = @Html.Raw(Json.Serialize(Model[0]));
        var cards = @Html.Raw(Json.Serialize(Model));
        var currentIndex = 0;
        var nextCard = cards[currentIndex + 1];
        function compareCards(currentSize, currentRarity, currentGoodTemper, currentCuteness, currentRating, nextSize, nextRarity, nextGoodTemper, nextCuteness, nextRating) {
            
            //alert(", Current Size: " + currentSize + ", Current Rarity: " + currentRarity + ", Current Temper: " + currentGoodTemper +
            //    ", Current Rating: " + currentRating + ", Next Size: " + nextSize + ", Next Size: " + nextSize + ", Next Rarity: " + nextRarity +
            //    ", Next Temper: " + nextGoodTemper + ", Next Size: " + nextCuteness + ", Next Cuteness: " + nextSize + ", Next Rating: " + nextRating)

            var category = $("input[name='category']:checked").val();

            if (nextCard) {
                document.getElementById("second-card").style.display = "block";
                switch (category) {
                    case "Size":
                        if (nextSize > currentSize) {
                            alert("Next card wins with a size of " + nextSize);
                        } else {
                            alert("Current card wins with a size of " + currentSize);
                        }
                        break;
                    case "Rarity":
                        if (nextRarity > currentRarity) {
                            alert("Next card wins with a rarity of " + nextRarity);
                        } else {
                            alert("Current card wins with a rarity of " + currentRarity);
                        }
                        break;
                    case "Good Temper":
                        if (nextGoodTemper > currentGoodTemper) {
                            alert("Next card wins with a good temper of " + nextGoodTemper);
                        } else {
                            alert("Current card wins with a good temper of " + currentGoodTemper);
                        }
                        break;
                    case "Cuteness":
                        if (nextCuteness > currentCuteness) {
                            alert("Next card wins with a cuteness of " + nextCuteness);
                        } else {
                            alert("Current card wins with a cuteness of " + currentCuteness);
                        }
                        break;
                    case "Rating":
                        if (nextRating > currentRating) {
                            alert("Next card wins with a rating of " + nextRating);
                        } else {
                            alert("Current card wins with a rating of " + currentRating);
                        }
                        break;
                    default:
                        alert("Please select a category");
                }
            } else {
                alert("No more cards in the deck");
            }
            currentIndex = currentIndex + 2;
        }
        
            //var category = $("input[name='category']:checked").val();
        //    if (nextCard) {
        //    document.getElementById("second-card").style.display = "block";
        //    switch (category) {
        //        case "Size":
        //            if (nextCard.Size < size) {
        //                alert(nextCard.Size);
        //            } else {
        //                alert(currentCard.Size);
        //            }
        //            break;
        //        case "Rarity":
        //            if (nextCard.Rarity < rarity) {
        //                alert("Next card wins with a rarity of " + nextCard.Rarity);
        //            } else {
        //                alert("Current card wins with a rarity of " + rarity);
        //            }
        //            break;
        //        case "GoodTemper":
        //            if (nextCard.GoodTemper < goodTemper) {
        //                alert("Next card wins with a good temper of " + nextCard.GoodTemper);
        //            } else {
        //                alert("Current card wins with a good temper of " + goodTemper);
        //            }
        //            break;
        //        case "Cuteness":
        //            if (nextCard.Cuteness < cuteness) {
        //                alert("Next card wins with a cuteness of " + nextCard.Cuteness);
        //            } else {
        //                alert("Current card wins with a cuteness of " + cuteness);
        //            }
        //            break;
        //        case "Rating":
        //            if (nextCard.Rating < rating) {
        //                alert("Next card wins with a rating of " + nextCard.Rating);
        //            } else {
        //                alert("Current card wins with a rating of " + rating);
        //            }
        //            break;
        //        default:
        //            alert("Please select a category to compare");
        //        }
        //        currentIndex++;
        //    } else {
        //        alert("No more cards in the deck");
        //    }
        //}

    </script>
